esphome:
  name: entrance
  friendly_name: Entrance
  platformio_options:
    build_flags:
    - -std=gnu++17 -Wall -Wextra
    - -DMBEDTLS_DEPRECATED_REMOVED -DCONFIG_BT_NIMBLE_ROLE_BROADCASTER_DISABLED -DCONFIG_BT_NIMBLE_ROLE_PERIPHERAL_DISABLED
# Configure the maximum number of connections as required (maximum: 9)
    - -DCONFIG_BT_NIMBLE_MAX_CONNECTIONS=6
    build_unflags:
    - -std=gnu++11
external_components:
- source:
    type: git
    url: https://github.com/homy-newfs8/esphome-sesame3
    ref: v0.17.0
  components: [ sesame, sesame_ble ]
# - source: 'components'
#   components: [ sesame, sesame_ble ]

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_passphrase

  ## Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sesame Fallback Hotspot"
    password: !secret wifi_fallback_password

captive_portal:

## Check memory usage
# debug:
#   update_interval: 10s
# sensor:
#   - platform: debug
#     free:
#       name: "Heap Free"
#     block:
#       name: "Heap Max Block"
#     loop_time:
#       name: "Loop Time"

## Enable logging
logger:

## Enable Home Assistant API
api:
  password: !secret api_password
  ## Example service to lock/unlock with various history tags specified in Home Assistant.
  ## In Home Assistant, this service will be seen as `esphome.entrance_sesame_with_tag`
  services:
  - service: sesame_with_tag
    variables:
      is_lock: bool
      tag: string
    then:
      lambda: |-
        if (is_lock) {
          id(lock_1).lock(tag);
        } else {
          id(lock_1).unlock(tag);
        }
  - service: run_bot2_script
    variables:
      script_no: int
    then:
      lambda: |-
        id(bot_2).run(script_no);

button:
- platform: template
  name: "Run Bot2 Script1"
  on_press:
  - lambda: |-
      id(bot_2).run(0);
- platform: template
  name: "Run Bot2 Script3"
  on_press:
  - lambda: |-
      id(bot_2).run(2);
- platform: template
  name: "Run Bot2 Default Script"
  on_press:
  - lambda: |-
      id(bot_2).run();

## Supported devices examples
## Choose one or more you want to use
## If you need more than four BLE connections, modify CONFIG_BT_NIMBLE_MAX_CONNECTIONS setting in esphome: section
sesame:
- id: sesame1
  ## model: Requried: sesame_5 / sesame_5_pro / sesame_touch / sesame_touch_pro / open_sensor / sesame_bike_2 / sesame_4 / sesame_3 / sesame_bot / sesame_bike
  model: sesame_5
  address: !secret sesame5_address
  ## public_key: Required for sesame_3 / sesame_4 / sesame_bot / sesame_bike
  ## for sesame_5 / sesame_5_pro comment out public_key line or specify any string (will be ignored)
  public_key: ""
  secret: !secret sesame5_secret
  lock:
    name: Lock1
    id: lock_1
    ## tag: You can specify SESAME tag (shown in history) value (default: "ESPHome").
    ## If you want to specify tag action-by-action, use lambda like:
    ##   lambda: id(lock_1).lock("More specific value")
    ## See example above api: services: section.
    tag: "My awesome system"
    ## expose operation history tag text
    history_tag:
      name: "Lock1_history_tag"
    ## expose operation history type
    history_type:
      name: "Lock1_history_type"
  ## expose battery remaining percentage with specified name
  battery_pct:
    name: "Lock1_battery_level"
  ## expose battery voltage with specified name
  battery_voltage:
    name: "Lock1_battery_voltage"
  ## expose SESAME connection status
  connection_sensor:
    name: "Lock1_connection"
  ##
  ## Fine adjustment parameters
  ##
  ## BLE connection timeout
  # timeout: 10s
  ## The ESP32 module will reboot after the specified number of connection failures (0 = do not reboot)
  # connect_retry_limit: 0
  ## When SESAME lock state is not known (not connected), send specified state to HomeAssistant (instead of default NONE state)
  ## (Candidates: NONE, LOCKED, UNLOCKED, JAMMED, LOCKING, UNLOCKING)
  # unknown_state_alternative: NONE
  ## Send NONE(or alternative) state to HomeAssistant if disconnected from SESAME for specified time
  # unknown_state_timeout: 20s

## You can specify and control multiple SESAME devices with one ESP32.
## This module reboots if one of specified devices unable to connect for a certain period of time.
## Be careful not to specify a mix of stable and unstable devices.
##
# - id: lock2
#   model: sesame_3
#   address: !secret sesame3_address
#   public_key: !secret sesame3_pubkey
#   secret: !secret sesame3_secret
#   lock:
#     unknown_state_alternative: LOCKING
#     name: Lock2
#     id: lock_2
#   connection_sensor:
#     name: Lock2_connection
# - id: bot1
#   model: sesame_bot
#   address: !secret sesamebot_address
#   public_key: !secret sesamebot_pubkey
#   secret: !secret sesamebot_secret
#   battery_pct:
#     name: Bot1_battery_level
#   battery_voltage:
#     name: Bot1_battery_voltage
#   lock:
#     name: Bot1
#     id: bot_1
# - id: bike1
#   model: sesame_bike
#   address: !secret sesamebike_address
#   public_key: !secret sesamebike_pubkey
#   secret: !secret sesamebike_secret
#   lock:
#     name: Bike1
#     id: bike_1
# - id: touch1
#   model: sesame_touch
#   secret: !secret touch_secret
#   address: !secret touch_address
#   always_connect: false
#   update_interval: 12h
#   battery_pct:
#     name: Touch1_battery_level
#   battery_voltage:
#     name: Touch1_battery_voltage
#   connection_sensor:
#     name: Touch1_connection
# - id: lock3
#   model: sesame_5
#   address: !secret sesame5_1_address
#   secret: !secret sesame5_1_secret
#   lock:
#     id: lock_3
#     name: Lock3
#   battery_pct:
#     name: "Lock3_battery_level"
# - id: bot2
#   model: sesame_bot_2
#   address: !secret bot2_address
#   secret: !secret bot2_secret
#   bot:
#     id: bot_2

## Use below definitions only for discovering your SESAME BT Addresses.
# sesame_ble:
