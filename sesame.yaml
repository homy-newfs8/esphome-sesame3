esphome:
  name: entrance
  friendly_name: Entrance
  libraries:
    - https://github.com/homy-newfs8/libsesame3bt#0.11.0
    # - symlink://../../../../../../PlatformIO/Projects/libsesame3bt
    - davetcc/TaskManagerIO @ ^1.4.0
  platformio_options:
    build_flags:
      - -std=gnu++17 -Wall -Wextra
      - -DMBEDTLS_DEPRECATED_REMOVED -DCONFIG_BT_NIMBLE_ROLE_BROADCASTER_DISABLED -DCONFIG_BT_NIMBLE_ROLE_PERIPHERAL_DISABLED
      - -DTM_ENABLE_CAPTURED_LAMBDAS
# Configure the maximum number of connections as required
      - -DCONFIG_BT_NIMBLE_MAX_CONNECTIONS=4
    build_unflags:
      - -std=gnu++11
external_components:
  - source:
      type: git
      url: https://github.com/homy-newfs8/esphome-sesame3
      ref: v0.4.0
    components: [ sesame_lock, sesame_ble ]
  # - source: 'components'

esp32:
  # board: seeed_xiao_esp32c3
  # board: m5stack-atoms3
  # variant: esp32s3
  board: m5stick-c
  framework:
    type: arduino
    version: latest
    platform_version: 6.3.2

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""
  # Example service to lock/unlock with various history tags specified in Home Assistant.
  # In Home Assistant, this service will be seen as `esphome.entrance_sesame_with_tag`
  services:
    - service: sesame_with_tag
      variables:
        is_lock: bool
        tag: string
      then:
        lambda: |-
          if (is_lock) {
            id(lock_1).lock(tag.c_str());
          } else {
            id(lock_1).unlock(tag.c_str());
          }

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_passphrase

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sesame Fallback Hotspot"
    password: !secret wifi_fallback_password

captive_portal:

# Supported devices examples
# Choose one or more you want to use
# If you need many BLE connections, modify CONFIG_BT_NIMBLE_MAX_CONNECTIONS setting above
lock:
  - platform: sesame_lock
    name: Lock1
    id: lock_1
    # model: Requried: sesame_5 / sesame_5_pro / sesame_3 / sesame_4 / sesame_bot / sesame_bike
    model: sesame_5
    # tag: You can specify SESAME tag (shown in history) value (default: "ESPHome").
    # If you want to specify tag action-by-action, use lambda like:
    #   lambda: id(lock_1).lock("More specific value")
    # See example above api: services: section.
    tag: "My awesome system"
    # public_key: Required for sesame_3 / sesame_4 / sesame_bot / sesame_bike
    # for sesame_5 / sesame_5_pro comment out public_key line or specify any string (will be ignored)
    public_key: ""
    secret: !secret sesame5_secret
    address: !secret sesame5_address

  # You can specify and control multiple SESAME devices with one ESP32.
  # This module reboots if one of specified devices unable to connect for a certain period of time.
  # Be careful not to specify a mix of stable and unstable devices.

  # - platform: sesame_lock
  #   name: Lock2
  #   id: lock_2
  #   model: sesame_3
  #   # public_key: !secret sesame3_pubkey
  #   public_key: foo
  #   secret: !secret sesame3_secret
  #   address: !secret sesame3_address
  # - platform: sesame_lock
  #   name: Bot1
  #   id: bot_1
  #   model: sesame_bot
  #   public_key: !secret sesamebot_pubkey
  #   secret: !secret sesamebot_secret
  #   address: !secret sesamebot_address
  # - platform: sesame_lock
  #   name: Bike1
  #   id: bike_1
  #   model: sesame_bike
  #   public_key: !secret sesamebike_pubkey
  #   secret: !secret sesamebike_secret
  #   address: !secret sesamebike_address
