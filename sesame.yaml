esphome:
  name: entrance
  friendly_name: Entrance
  libraries:
    - https://github.com/homy-newfs8/libsesame3bt-core#v0.3.0
    # - symlink://../../../../../../PlatformIO/Projects/libsesame3bt-core
  platformio_options:
    build_flags:
      - -std=gnu++17 -Wall -Wextra
      # To using ESP-IDF uncomment below
      # - -DUSE_FRAMEWORK_MBEDTLS_CMAC
    build_unflags:
      - -std=gnu++11
external_components:
  # - source:
  #     type: git
  #     url: https://github.com/homy-newfs8/esphome-sesame3
  #     ref: v0.9.0
  #   components: [ sesame_lock, sesame_ble ]
  - source: 'components'

# If you want to know your SESAME MAC Address, uncomment below two lines.
#esp32_ble_tracker:
#sesame_ble:

esp32:
  board: seeed_xiao_esp32c3
  # board: m5stack-atoms3
  # variant: esp32s3
  # board: m5stick-c
  framework:
    type: arduino
    version: latest
    platform_version: 6.5.0

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""
  # Example service to lock/unlock with various history tags specified in Home Assistant.
  # In Home Assistant, this service will be seen as `esphome.entrance_sesame_with_tag`
  # services:
  #   - service: sesame_with_tag
  #     variables:
  #       is_lock: bool
  #       tag: string
  #     then:
  #       lambda: |-
  #         if (is_lock) {
  #           id(lock_1).lock(tag);
  #         } else {
  #           id(lock_1).unlock(tag);
  #         }

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_passphrase

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sesame Fallback Hotspot"
    password: !secret wifi_fallback_password

captive_portal:

# Please declare the following sensors even if you do not use them.
sensor:
text_sensor:
binary_sensor:

# Supported devices examples
# Choose one or more you want to use

# Declare ble_client with SESAME MAC Address and it's own ID
ble_client:
  - mac_address: !secret sesame5_address
    id: ble_device_1
  # - mac_address: !secret sesame3_address
  #   id: ble_device_2
  # - mac_address: !secret sesamebot_address
  #   id: ble_device_3
  # - mac_address: !secret sesamebike_address
  #   id: ble_device_4

lock:
  - platform: sesame_lock
    # Relate with ble_client by ID
    ble_client_id: ble_device_1
    name: Lock1
    id: lock_1
    # model: Requried: sesame_5 / sesame_5_pro / sesame_3 / sesame_4 / sesame_bot / sesame_bike
    model: sesame_5
    # tag: You can specify SESAME tag (shown in history) value (default: "ESPHome").
    # If you want to specify tag action-by-action, use lambda like:
    #   lambda: id(lock_1).lock("More specific value")
    # See example above api: services: section.
    tag: "My awesome system"
    # public_key: Required for sesame_3 / sesame_4 / sesame_bot / sesame_bike
    # for sesame_5 / sesame_5_pro comment out public_key line or specify any string (will be ignored)
    public_key: ""
    secret: !secret sesame5_secret
    # expose battery remaining percentage with specified name
    battery_pct:
      name: "Lock1_battery_level"
    # expose battery voltage with specified name
    battery_voltage:
      name: "Lock1_battery_voltage"
    # expose operation history tag text
    history_tag:
      name: "Lock1_history_tag"
    # expose operation history type
    history_type:
      name: "Lock1_history_type"
    # expose connection state
    connection_sensor:
      name: "Lock1_connection"

  # You can specify and control multiple SESAME devices with one ESP32.
  # This module reboots if one of specified devices unable to connect for a certain period of time.
  # Be careful not to specify a mix of stable and unstable devices.
  # - platform: sesame_lock
  #   ble_client_id: ble_device_2
  #   name: Lock2
  #   id: lock_2
  #   model: sesame_3
  #   public_key: !secret sesame3_pubkey
  #   secret: !secret sesame3_secret

  # - platform: sesame_lock
  #   ble_client_id: ble_device_3
  #   name: Bot1
  #   id: bot_1
  #   model: sesame_bot
  #   public_key: !secret sesamebot_pubkey
  #   secret: !secret sesamebot_secret

  # - platform: sesame_lock
  #   ble_client_id: ble_device_4
  #   name: Bike1
  #   id: bike_1
  #   model: sesame_bike
  #   public_key: !secret sesamebike_pubkey
  #   secret: !secret sesamebike_secret
