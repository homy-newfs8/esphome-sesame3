esphome:
  name: entrance
  friendly_name: Entrance
  libraries:
    - https://github.com/homy-newfs8/libsesame3bt#0.16.0
    # - symlink://../../../../../../PlatformIO/Projects/libsesame3bt
  platformio_options:
    build_flags:
      - -std=gnu++17 -Wall -Wextra
      - -DMBEDTLS_DEPRECATED_REMOVED -DCONFIG_BT_NIMBLE_ROLE_BROADCASTER_DISABLED -DCONFIG_BT_NIMBLE_ROLE_PERIPHERAL_DISABLED
# Configure the maximum number of connections as required
      - -DCONFIG_BT_NIMBLE_MAX_CONNECTIONS=4
    build_unflags:
      - -std=gnu++11
    lib_ldf_mode: 'deep'
external_components:
  - source:
      type: git
      url: https://github.com/homy-newfs8/esphome-sesame3
      ref: v0.9.0
    components: [ sesame_lock, sesame_ble ]
  # - source: 'components'

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

## Enable logging
logger:

## Enable Home Assistant API
api:
  password: ""
  ## Example service to lock/unlock with various history tags specified in Home Assistant.
  ## In Home Assistant, this service will be seen as `esphome.entrance_sesame_with_tag`
  services:
    - service: sesame_with_tag
      variables:
        is_lock: bool
        tag: string
      then:
        lambda: |-
          if (is_lock) {
            id(lock_1).lock(tag);
          } else {
            id(lock_1).unlock(tag);
          }

# ota:
#   password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_passphrase

  ## Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sesame Fallback Hotspot"
    password: !secret wifi_fallback_password

captive_portal:

## Please declare the following sensors even if you do not use them.
sensor:
text_sensor:
binary_sensor:

## Supported devices examples
## Choose one or more you want to use
## If you need more than four BLE connections, modify CONFIG_BT_NIMBLE_MAX_CONNECTIONS setting in esphome: section
lock:
  - platform: sesame_lock
    name: Lock1
    id: lock_1
    ## model: Requried: sesame_5 / sesame_5_pro / sesame_3 / sesame_4 / sesame_bot / sesame_bike
    model: sesame_5
    ## tag: You can specify SESAME tag (shown in history) value (default: "ESPHome").
    ## If you want to specify tag action-by-action, use lambda like:
    ##   lambda: id(lock_1).lock("More specific value")
    ## See example above api: services: section.
    tag: "My awesome system"
    ## public_key: Required for sesame_3 / sesame_4 / sesame_bot / sesame_bike
    ## for sesame_5 / sesame_5_pro comment out public_key line or specify any string (will be ignored)
    public_key: ""
    secret: !secret sesame5_secret
    address: !secret sesame5_address
    ## expose battery remaining percentage with specified name
    battery_pct:
      name: "Lock1_battery_level"
    ## expose battery voltage with specified name
    battery_voltage:
      name: "Lock1_battery_voltage"
    ## expose operation history tag text
    history_tag:
      name: "Lock1_history_tag"
    ## expose operation history type
    history_type:
      name: "Lock1_history_type"
    ## expose SESAME connection status
    connection_sensor:
      name: "Lock1_connection"
    ##
    ## Fine adjustment parameters
    ##
    ## BLE connection timeout
    # timeout: 5s
    ## The ESP32 module will reboot after the specified number of connection failures (0 = do not reboot)
    # connect_retry_limit: 0
    ## When SESAME lock state is not known (not connected), send specified state to HomeAssistant (instead of default NONE state)
    ## (Candidates: NONE, LOCKED, UNLOCKED, JAMMED, LOCKING, UNLOCKING)
    # unknown_state_alternative: NONE
    ## Send NONE(or alternative) state to HomeAssistant if disconnected from SESAME for specified time
    # unknown_state_timeout: 10s

  ## You can specify and control multiple SESAME devices with one ESP32.
  ## This module reboots if one of specified devices unable to connect for a certain period of time.
  ## Be careful not to specify a mix of stable and unstable devices.

  # - platform: sesame_lock
  #   unknown_state_alternative: LOCKING
  #   name: Lock2
  #   id: lock_2
  #   model: sesame_3
  #   public_key: !secret sesame3_pubkey
  #   secret: !secret sesame3_secret
  #   address: !secret sesame3_address
  #   connection_sensor:
  #     name: "Lock2_connection"
  # - platform: sesame_lock
  #   name: Bot1
  #   id: bot_1
  #   model: sesame_bot
  #   public_key: !secret sesamebot_pubkey
  #   secret: !secret sesamebot_secret
  #   address: !secret sesamebot_address
  # - platform: sesame_lock
  #   name: Bike1
  #   id: bike_1
  #   model: sesame_bike
  #   public_key: !secret sesamebike_pubkey
  #   secret: !secret sesamebike_secret
  #   address: !secret sesamebike_address


## Use below definitions only for discovering your SESAME BT Addresses.
## (lock: and esp32_ble_tracker: are exclusive)
# esp32_ble_tracker:
# sesame_ble:
